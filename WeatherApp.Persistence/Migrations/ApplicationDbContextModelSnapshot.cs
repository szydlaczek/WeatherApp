// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApp.Persistence.Context;

namespace WeatherApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherApp.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApiId");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.Main", b =>
                {
                    b.Property<int>("MainId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("Humidity");

                    b.Property<double>("Pressure");

                    b.Property<double>("Temperature");

                    b.HasKey("MainId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("Mains");
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.UserRole", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.Weather", b =>
                {
                    b.Property<int>("WeatherId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Description");

                    b.Property<string>("Main");

                    b.HasKey("WeatherId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.Wind", b =>
                {
                    b.Property<int>("WindId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<double>("Speed");

                    b.HasKey("WindId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("Winds");
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.Main", b =>
                {
                    b.HasOne("WeatherApp.Domain.Entities.City", "City")
                        .WithOne("Main")
                        .HasForeignKey("WeatherApp.Domain.Entities.Main", "CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("WeatherApp.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WeatherApp.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.Weather", b =>
                {
                    b.HasOne("WeatherApp.Domain.Entities.City", "City")
                        .WithOne("Weather")
                        .HasForeignKey("WeatherApp.Domain.Entities.Weather", "CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.Wind", b =>
                {
                    b.HasOne("WeatherApp.Domain.Entities.City", "City")
                        .WithOne("Wind")
                        .HasForeignKey("WeatherApp.Domain.Entities.Wind", "CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
